#!/usr/bin/env python

import os
from sys import argv, stderr
import signal
from threading import Thread
import subprocess as sp

from socketserver import ThreadingTCPServer
from http.server import BaseHTTPRequestHandler
import urllib.parse

if len(argv) < 3:
    stderr.write('usage: todd port command [arg1 arg2 ...]\n')
    exit(1)
port = int(argv[1])
command = argv[2:]

# Create the server.
class ToddHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        stderr.write('Client has connected.\n')
        self.send_response(200, message='*sigh*, faaaain...')
        if command[0] == 'cat' and len(command) == 2:
            filename = urllib.parse.quote(command[1])
            self.send_header(
                'Content-Disposition',
                'attachment; filename="{}"; filename*=UTF-8\'\'{}'.format(
                     filename,
                     filename,
                 ),
            )
        self.end_headers()
        with sp.Popen(command, stdout=sp.PIPE) as p:
            while True:
                # use os.read, so that new data is picked up immediately.
                data = os.read(p.stdout.fileno(), 0x1_0000)
                if len(data) == 0:
                    break

                try:
                    self.wfile.write(data)
                except BrokenPipeError:
                    break
                except ConnectionResetError:
                    break
        stderr.write('Client has disconnected.\n')
ThreadingTCPServer.allow_reuse_address = True
server = ThreadingTCPServer(('', port), ToddHandler)
server.serve_forever()
